---

- name: create wh_api_group
  group:
    name: "{{ wh_api_group }}"
    state: present
  become: true

- name: create wh_api_user
  user:
    name: "{{ wh_api_user }}"
    comment: "wh_api_user"
    group: "{{ wh_api_group }}"
    shell: /sbin/nologin
    state: present
  become: true

- name: install git
  apt:
    pkg:
      - git
    state: present
    install_recommends: no
    update_cache: yes
  become: true

- name: install pygit
  pip:
    name: pygit
    extra_args: --upgrade

- name: enshure build directory not exists
  file:
    path: "{{ wh_api_build_directory }}"
    state: "absent"
  become: true

- name: clone sources
  git:
    repo: "{{ wh_api_repository_url }}"
    dest: "{{ wh_api_build_directory }}"
    single_branch: yes
    version: "{{ wh_api_repository_version }}"
    clone: yes
    accept_newhostkey: yes
    depth: 1
  become: false

- name: clear locks
  file:
    path: "/tmp/NuGetScratch"
    state: "absent"
  become: true

- name: build application
  command: |
    /usr/bin/dotnet publish
    --output {{ wh_api_build_directory }}/bin
    --configuration {{ wh_api_build_configuration }}
  args:
    chdir: "{{ wh_api_build_directory }}"
  become: false

- name: create working directory
  file:
    path: "{{ wh_api_working_directory }}"
    state: "directory"
    recurse: yes
    owner: "{{ wh_api_user }}"
    group: "{{ wh_api_group }}"
    mode: "0755"
  become: true

- name: ls build results
  command: "ls {{ wh_api_build_directory }}/bin"
  register: "build_results"

- name: copy files to working directory
  copy:
    remote_src: true
    src: "{{ wh_api_build_directory }}/bin/{{ item }}"
    dest: "{{ wh_api_working_directory }}"
    owner: "{{ wh_api_user }}"
    group: "{{ wh_api_group }}"
    mode: "0555"
    backup: no
    force: yes
  with_items: "{{ build_results.stdout_lines }}"
  become: true
  notify:
    - restart_wh_api

- name: render appsettings template
  template:
    dest: "{{ wh_api_working_directory }}/appsettings.json"
    src: "appsettings.json.j2"
    owner: "{{ wh_api_user }}"
    group: "{{ wh_api_group }}"
    mode: 0644
  become: true
  notify:
    - restart_wh_api

- name: render jwt template
  template:
    dest: "{{ wh_api_working_directory }}/jwt.json"
    src: "jwt.json.j2"
    owner: "{{ wh_api_user }}"
    group: "{{ wh_api_group }}"
    mode: 0644
  become: true
  notify:
    - restart_wh_api

- name: create logs directory
  file:
    path: "{{ wh_api_working_directory }}/Logs"
    state: "directory"
    recurse: yes
    owner: "{{ wh_api_user }}"
    group: "{{ wh_api_group }}"
    mode: "0755"
  become: true

- name: render wh_api systemd service template
  template:
    dest: "{{ wh_api_systemd_dir }}/{{ wh_api_systemd_unit }}"
    src: "wh-api.service.j2"
    owner: root
    group: root
    mode: 0644
  become: true
  notify:
    - restart_wh_api

- name: enable wh_api systemd service
  systemd:
    daemon_reload: yes
    enabled: yes
    name: "{{ wh_api_systemd_unit }}"
    state: started
  become: true

- name: clean build directory
  file:
    path: "{{ wh_api_build_directory }}"
    state: "absent"
  become: true
