---

- name: install openssl
  apt:
    pkg:
      - openssl
    state: present
    install_recommends: no
    update_cache: yes
  become: true

- name: install letsencrypt
  pip:
    name: "{{ item }}"
    extra_args: --upgrade
  with_items:
    - letsencrypt
    - pyopenSSL
  become: true

- name: create letsencrypt directory
  file:
    path: "/var/www/letsencrypt"
    state: "directory"
    mode: "0755"
    recurse: yes
  become: true

- name: install nginx
  apt:
    pkg:
      - nginx-full
    state: present
    install_recommends: no
    update_cache: no
  become: true
  notify:
    - restart_nginx

- name: remove default nginx config
  file:
    path: "/etc/nginx/sites-available/"
    state: absent
  become: true

- name: generate dhparams
  shell: openssl dhparam -out /etc/nginx/dhparams.pem 2048
  args:
    creates: /etc/nginx/dhparams.pem

- name: calculate set empty domains list
  set_fact:
    proxy_domains: []

- name: calculate full domains list
  set_fact:
    proxy_domains: "{{ proxy_domains + item.domains }}"
  with_items: "{{ proxy_vs_configs }}"

- name: render main nginx config
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    mode: "0644"
    owner: "root"
    group: "root"
    validate: "nginx -tc %s"
    force: yes
    backup: no
  become: true
  notify:
    - reload_nginx

- name: render stats nginx config
  template:
    src: nginx-stats.conf.j2
    dest: "/etc/nginx/sites-enabled/stats.conf"
    mode: "0644"
    owner: "root"
    group: "root"
    validate: "sh -c 'nginx -t && echo %s'"
    force: yes
    backup: no
  become: true

- name: render http nginx config
  template:
    src: nginx-http.conf.j2
    dest: "/etc/nginx/sites-enabled/bare-http.conf"
    mode: "0644"
    owner: "root"
    group: "root"
    validate: "sh -c 'nginx -t && echo %s'"
    force: yes
    backup: no
  become: true
  register: http

- name: reload nginx
  shell: "nginx -t && nginx -s reload"
  when:
    - http is changed
  become: true

- name: dry-run letsencrypt certificate
  shell: >
    letsencrypt certonly -n --webroot
    -w /var/www/letsencrypt
    -m {{ proxy_letsencrypt_email }}
    --agree-tos -d {{ proxy_domains | join(' -d ') }} --expand --dry-run
  become: true

- name: create letsencrypt certificate
  shell: >
    letsencrypt certonly -n --webroot
    -w /var/www/letsencrypt
    -m {{ proxy_letsencrypt_email }}
    --agree-tos -d {{ proxy_domains | join(' -d ') }}
  args:
    creates: "/etc/letsencrypt/live/{{ proxy_domains[0] }}"
  become: true
  notify:
    - reload_nginx

- name: renew letsencrypt certificate
  shell: >
    letsencrypt certonly -n --webroot
    -w /var/www/letsencrypt --force-renewal
    -m {{ proxy_letsencrypt_email }}
    --agree-tos -d {{ proxy_domains | join(' -d ') }} --expand
  become: true
  notify:
    - reload_nginx
  when:
    - proxy_renew_cert

- name: render site nginx config
  template:
    src: nginx-tls.conf.j2
    dest: "/etc/nginx/sites-enabled/{{ item.domains[0] }}.conf"
    mode: "0644"
    owner: "root"
    group: "root"
    validate: "sh -c 'nginx -t && echo %s'"
    force: yes
    backup: no
  become: true
  with_items: "{{ proxy_vs_configs }}"
  notify:
    - reload_nginx

- name: renew cert cronjob
  cron:
    minute: "0"
    hour: "4"
    weekday: "*"
    name: "renew cert"
    cron_file: "renew-cert-le"
    user: "root"
    job: >-
      letsencrypt certonly -n --webroot
      -w /var/www/letsencrypt
      -m {{ proxy_letsencrypt_email }}
      --agree-tos -d {{ proxy_domains | join(' -d ') }}
      && nginx -t && nginx -s reload
  become: true
